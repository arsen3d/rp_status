apiVersion: apps/v1
kind: Deployment
metadata:
  name: rp-dashboard
  namespace: lilypad
  labels:
    app: rp-dashboard
  annotations:
    argocd.argoproj.io/compare-options: IgnoreResourceVersion,IgnoreResourceStatusField
    argocd.argoproj.io/sync-options: Prune=false,SkipDryRunOnMissingResource=true,FieldManager=argocd-deploy,Replace=true,Force=true
    argocd.argoproj.io/sync-wave: "1"
    # argocd.argoproj.io/sync-options: Replace=true,Force=true
    # Use the git commit hash to force redeploy on every sync
    git-commit: "${GIT_COMMIT_HASH}"
    force-recreate: "${GIT_COMMIT_HASH}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rp-dashboard
  template:
    metadata:
      labels:
        app: rp-dashboard
      annotations:
        kubectl.kubernetes.io/restartedAt: "$(date +%s)"
        git-commit: "${GIT_COMMIT_HASH}"
    spec:
      initContainers:
      - name: git-clone
        image: alpine/git:latest
        command:
        - /bin/sh
        - -c
        - |
          # Clone the application repository
          cd /workspace
          git clone https://github.com/arsen3d/rp_status.git .
          # Save commit hash for traceability
          git rev-parse HEAD > /workspace/commit_hash
          echo "Repository cloned successfully at commit $(cat /workspace/commit_hash)"
        volumeMounts:
        - name: workspace-volume
          mountPath: /workspace
      - name: build-container
        image: gcr.io/kaniko-project/executor:latest
        args:
        - "--dockerfile=/workspace/Dockerfile"
        - "--context=dir:///workspace"
        - "--no-push"
        - "--tarPath=/workspace/image.tar"
        - "--destination=localhost:5000/rp_status-rp-dashboard:latest"
        volumeMounts:
        - name: workspace-volume
          mountPath: /workspace
      - name: load-image
        image: docker:20.10
        securityContext:
          privileged: true
        command:
        - /bin/sh
        - -c
        - |
          # Start Docker daemon in background
          dockerd &
          sleep 5
          
          # Load the image from tar
          echo "Loading image from tar file..."
          docker load < /workspace/image.tar
          
          # List available images to see what we have
          echo "Available images after loading:"
          docker images
          
          # The tar file might contain the image with various tags
          # Make sure it's available at the exact path our main container expects
          docker tag localhost:5000/rp_status-rp-dashboard:latest localhost:5000/rp_status-rp-dashboard:latest || true
          
          echo "Final image check:"
          docker images | grep rp-dashboard
          
          echo "Image ready for use"
        volumeMounts:
        - name: workspace-volume
          mountPath: /workspace
        - name: docker-socket
          mountPath: /var/run/docker.sock
      containers:
      - name: rp-dashboard
        image: localhost:5000/rp_status-rp-dashboard:latest
        imagePullPolicy: Never
        env:
        - name: GIT_COMMIT
          valueFrom:
            configMapKeyRef:
              name: build-info
              key: git_commit
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "0.5"
            memory: "512Mi"
          requests:
            cpu: "0.2"
            memory: "256Mi"
        volumeMounts:
        - name: workspace-volume
          mountPath: /workspace
          readOnly: true
      volumes:
      - name: workspace-volume
        emptyDir: {}
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
