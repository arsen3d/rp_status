apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: docker-build-pipeline
  namespace: lilypad
spec:
  workspaces:
    - name: shared-workspace
  params:
    - name: repo-url
      type: string
      description: The git repository URL to clone from
    - name: branch-name
      type: string
      description: The git branch to clone
      default: "main"
    - name: image-name
      type: string
      description: The name of the image to build
      default: "rp_status-rp-dashboard"
    - name: image-tag
      type: string
      description: The tag for the built image
      default: "latest"
    - name: registry-url
      type: string
      description: The Docker registry URL to push the image to
      default: "localhost:5000"
    - name: registry-user
      type: string
      description: The Docker registry username
      default: ""
    - name: registry-password
      type: string
      description: The Docker registry password
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
        kind: ClusterTask
        apiVersion: tekton.dev/v1beta1
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch-name)
        - name: deleteExisting
          value: "true"
    - name: build-docker-image
      taskRef:
        name: docker-build-and-load
        kind: Task
        apiVersion: tekton.dev/v1beta1
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: image-name
          value: $(params.image-name)
        - name: image-tag
          value: $(params.image-tag)
        - name: context
          value: .
        - name: dockerfile
          value: ./Dockerfile
    - name: push-docker-image
      taskRef:
        name: docker-push
        kind: Task
        apiVersion: tekton.dev/v1beta1
      runAfter:
        - build-docker-image
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: image-name
          value: $(params.image-name)
        - name: image-tag
          value: $(params.image-tag)
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-user
          value: $(params.registry-user)
        - name: registry-password
          value: $(params.registry-password)
    - name: deploy-application
      taskRef:
        name: kubernetes-actions
        kind: Task
        apiVersion: tekton.dev/v1beta1
      runAfter:
        - push-docker-image
      params:
        - name: script
          value: |
            # Since we're using the image built directly in minikube, we don't need to use registry URL
            echo "Updating deployment configuration to use local image..."
            sed -i "s|image:.*|image: rp_status-rp-dashboard:latest|g" ./argocd/deployment.yaml
            sed -i "s|imagePullPolicy:.*|imagePullPolicy: Never|g" ./argocd/deployment.yaml
            
            # Create registry credentials if provided
            if [ -n "$(params.registry-user)" ] && [ -n "$(params.registry-password)" ]; then
              echo "Creating registry credentials secret..."
              kubectl create secret docker-registry registry-credentials \
                --docker-server=$(params.registry-url) \
                --docker-username=$(params.registry-user) \
                --docker-password=$(params.registry-password) \
                --namespace=lilypad \
                --dry-run=client -o yaml | kubectl apply -f -
            else
              echo "Warning: No registry credentials provided."
            fi
            
            # Apply the Kubernetes resources
            echo "Applying Kubernetes resources..."
            kubectl apply -k ./argocd/
            
            # Restart the deployment to ensure it picks up the new image
            echo "Restarting deployment..."
            kubectl rollout restart deployment rp-dashboard -n lilypad
            
            # Monitor rollout status
            echo "Monitoring rollout status..."
            kubectl rollout status deployment rp-dashboard -n lilypad --timeout=60s
