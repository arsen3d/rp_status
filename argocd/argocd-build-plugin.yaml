apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-build-plugin
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: argocd
data:
  plugin.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: ConfigManagementPlugin
    metadata:
      name: argocd-build-plugin
    spec:
      version: v1.0
      generate:
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -e
            
            # Build the docker image
            cd ${ARGOCD_APP_SOURCE_PATH}/..
            echo "Building Docker image..."
            
            # Instead of building directly, trigger the Tekton pipeline
            cd ${ARGOCD_APP_SOURCE_PATH}
            
            # Create a new PipelineRun with a unique name based on timestamp
            TIMESTAMP=$(date +%s)
            cat <<EOF > /tmp/pipelinerun-${TIMESTAMP}.yaml
            apiVersion: tekton.dev/v1beta1
            kind: PipelineRun
            metadata:
              name: docker-build-pipeline-run-${TIMESTAMP}
              namespace: lilypad
            spec:
              pipelineRef:
                name: docker-build-pipeline
              workspaces:
                - name: shared-workspace
                  volumeClaimTemplate:
                    spec:
                      accessModes:
                        - ReadWriteOnce
                      resources:
                        requests:
                          storage: 1Gi
              params:
                - name: repo-url
                  value: https://github.com/arsen3d/rp_status.git
                - name: branch-name
                  value: main
                - name: image-name
                  value: rp_status-rp-dashboard
                - name: image-tag
                  value: latest
                - name: registry-url
                  value: "app-registry:5000"
                - name: registry-user
                  value: ""
                - name: registry-password
                  value: ""
            EOF
            
            # Apply the PipelineRun
            kubectl apply -f /tmp/pipelinerun-${TIMESTAMP}.yaml
            
            # Wait for the pipeline to complete
            echo "Waiting for pipeline to start..."
            sleep 10
            
            # Monitor the pipeline status
            echo "Monitoring pipeline status..."
            # Check that the pipeline exists
            kubectl get pipelinerun docker-build-pipeline-run-${TIMESTAMP} -n lilypad
            
            # Apply kustomization
            kubectl kustomize . > /tmp/manifests.yaml
            cat /tmp/manifests.yaml
